################################
## DONE TODAY ##################
################################

2014-09-16
- Binds filter-edit-rule: attributes to their controller including their context-sensitive dependencies; extends the filter-rule-attributes controller to accommodate for necessary attribute data.

2014-09-14
- Binds the following filter-edit-rule views to their respective controller-data on init: size, path, date. Also implements full conditional widget-switching (e.g. time widget hides when "and time" tickbox is unticked). 

2014-09-14
- Optimizes layout of filter-edit-view: date/time. Adds the filter-edit-view: attribute and removes filter-edit-view: age (as age can already be expressed through date rule).

2014-09-14
- Adds initial GUI for backup-filter-rule-date.

2014-09-13
- In the backup-filter edit-view, adds scroll area for filter rules as well as initial rule widgets for size and path. Also extends view to change filter title, mode (and/or/xor) and adds a drop-down list to add a rule. 

2014-09-13
- Filter manager now refreshes directly on log-in/-out/lock/unlock signal. Did on focusIn before which was a bit dirty.

2014-09-12
- Filter manager now loads filter edit view when selecting filter in list.

2014-09-10
- Filter-list in filter-manager now lists available filters. It does session-state-sensitive refreshing, which means that it disables filters for sessions that are currently locked or logged-out all together (and re-enables if locked-in and unlocked).

2014-09-10
- Adds initial filter-manager window which is also accessible through main-menu -> window -> Filter-Manager

2014-09-10
- Backup-Set add dialog now responds to validation errors with a message popup specifying the exact error.

2014-09-10
- The "add" button now fully adds a backup-set, on the gui- as well as ctrl-level.
- Bugfix: backup-set-gui is now unloaded correctly when loaded and its corresponding set deleted. Crashed before due to emptying canvas completely (through empty_canvas instead of close_set, including arrow carrier); also empties canvas only if deleted set is the currently loaded one.

2014-09-09
- adds dialog window that prompts for details when adding set through menu in sets view. Dialog window also performs simple validation. 

2014-09-08
- install sphinx on linux
- start adding bs.gui.view_sets.BSMenuItemAdd
- add "add-button" gui class bs.gui.view_sets.BSMenuItemAdd, also to BSMenu itself.
- comprehensive, project-wide code-cleanup (pep8)

2014-08-04
- adds some details to README
- file timestamps now get rounded to n positions after the fp (set it to 1 for now) to fix precision conflicts across different file systems/db precision
- a few filestat combinations at backup time get handled differently on linux due to linux's different policies of setting timestamps (compared to windows)

2013-12-04
- details view's details now *all* update on partial update signals (including file-path)
- backup-job widget: Now updates own progress-bar even if it has not focus
- BSFrame: css property now handles has-focus and has-no-focus states, updated in all code that uses it
- backup-procedure: Crash-bugs fixed which seemed to be (in part) triggered by use of non-Qt Signal and lack of thread-safety locks

2013-12-02
- BackupThreadWorker: cleaned-up
- When pre-calc on view_sets is running and backup is started, progress is picked up from where it is at and continued (same execution/objects technically)

2013-11-28
- BackupCtrl:
	- Thread-Worker management is reorganized: Clearer and *stable* structure
	- Events now dispatch with kwargs only for added flexibility
	- thread/worker destruction-handling now works reliably across scenarios
- backup_monitor/view_sets
	- Full UI now stable

2013-11-27
- BackupCtrl:
	- Now emits more signals and in a more systemized fashion (byte_count_current/-_total, file_count_current/-_total, etc)
	- All contracting classes (FileObj, Event etc.) now use new Signal scheme
- view_sets:
	- Update-processing now uses new signals as well as new event-loop event-injection
- view_backup_monitor:
	- Now uses new signals to update GUI
- hash function now sends update events

2013-11-19 - 26
- Backup-Monitor
	- Adds numerous threading- and concurrency-work and -fixes
	- Ensures stability, GUI operations pushed back into GUI event-loop through queued signals
	- Progress now updates in response to "update_signal" signals on backup ctrl
- BackupCtrl
	- Several adjustments
	- New events and -handling
	- Progress publishes on signals

2013-11-18 - 20
- Major design-work on backup-monitor

2013-11-14 - 15
- fine-tunes the backup-manager queue, details display updating, chained-dispatch of jobs in queue (when current is completed)

2013-11-13
- fully implement request_exit() into all necessary GUI classes so far (to quit threads on view_sets sources)
- optimized view_sets source pre-process (backup-ctrl) threat management

2013-11-12
- backup-monitor now opens on job dispatch
- backup-set now gets dispatched right into backup-manager queue (no options dialog yet, just dispatches into queue 1 for now)
- [in progress] backup-monitor runs through backup-sources in in backup-set and executes them
- add link to backup-monitor in main-menu

2013-11-11
- fully tested and completed scroll-area for x- and y-axis operability
- added option for queue to:
	- move first backup-job to pole-position
	- retire current pole-position job and move next in queue in
- made backup-job widget expandable, added functionality and control of progress-bar
- implemented "currently active LED" and focus controls
- add first elements of details view:
	- progress bar
	- "current item"

2013-11-10
- refactored ScrollArea class into gui.lib
- implemented scrollbars, fully finished all controls and detail work
- automatic selection/focus of next backup-job in queue on delete
- scrolling via keyboard (arrow keys) now supported, vertically only.

2013-11-09
- implemented full control of BMQueueView and (temp. name for now) ScrollArea. No scroll bars yet but mouse wheel scrolling fully works.
- add/remove methods for the queue

2013-11-09 (was actually 2013-11-08)
- Started package view_backup_monitor and writing some of its first classes BMMainView, BMQueueView, BMQueueJobView
- Initial work on BMQueueView with some methods
- Full docs update incl. formatting

2013-11-08 (was actually 2013-11-07)
- started package window_backup_monitor and class WindowBackupMonitor
- global formatting (css)/layout work on docs

2013-11-06 - 07 (was actually 2013-11-05 - 06)
- substantial work on docs. Started custom theme, merged default/basic into the new theme, clean up, customization, code integration etc.

2013-08-14 - 19
- Document (Sphinx) all of bs.gui.window_about.*
- Document (Sphinx) all of bs.gui.lib.*
- Document (Sphinx) all of bs.model.models_master.*
- Document (Sphinx) rest of bs.ctrl.session

2013-08-13
- Documented (Sphinx) more in bs.ctrl.session

2013-08-12
- Documented (Sphinx) bs.ctrl.backup and all modules and packages

2013-08-04 - 05
- implemented basic preliminary checks for database validity + gui/log error output
- Figured out how to generate CA/SPC certificates and digitally sign a MSI installer
- Fully set-up (basic) MSI installer, verified to work on all platforms (except Win8 so far), fixed all issues

2013-08-03
- Changed project name globally to "Recapp"

2013-08-02
- fine-tuned main-menu updates
- implemented conditional set/session-exit handling on close/exit and warnings if other sessions active

2013-07-28
- BBSTargetItem: displays path and, if offline, offline status
- BSTarget: nests separate BSTargetItem's now.

2013-07-26
- bug-fix: jumping canvas when dragging with active connection-arrow on carrier
- added filter_rule representation formatting (bold text for key data)

2013-07-25
- finished writing filter_rules: size, path, date, attributes

2013-07-24
- started writing backup_filter_rules, including representations and object-serialization structure for DB
- blocked out essential structure/architecture of backup_filter_rules

2013-07-21
- started initial work on filter_item nodes and thoughts on object structures and organization of filters
- refactored backup_source-/-filter-/-target_ctrl: _backup_source => _backup_entity, backup_filter => backup_entity, etc
- multiple outbound connections: finalized all connection checks, bugs, etc., fully operational now.

2013-07-20
- [WIP] implemented multiple-outgoing connections per (source, filter) node
	- objects' data-structure changes (outgoing references were singular references, all changed to lists)
	- conn./disconn. code all changed
	- database serialization updated accordingly

2013-07-19
- started thinking about logics behind filters: nodes need to be able to connect to multiple other nodes
	- started implementing del button on arrow
- finalized threaded backup_source pre-computing, exit handling, etc.; computing now per backup_source. Each backup_source has its own backup_ctrl.

2013-07-18
- integrated threaded real-time visualization of capacity and number of files to be backuped by each backup_source in a backup_set while backup-sim runs
- fully implemented PBKDF2-based password-authentication for BackupCtrl object (full backup/simulate)

2013-07-17
- backup-process: started thinking about how to pre-compute number of files/capacity that needs backup for preview purposes (free-space verification, visualization, etc.)
- "homing" shortcut added to canvas to focus in on node group if it gets far off-screen
- nodes are now fully deletable

2013-07-16
- finished canvas context menu to create new nodes
- node-creation now fully completed (persistent, saves etc.)
- trigger set_modified when disconnecting, creating nodes
- nodes can now be focused on (click), with visual feedback (border)

2013-07-15
- isolated connect_start actions for nodes (associating arrows) onto node's connection pad (BSNodeConnPad)
- canvas/nodes: isolated all actions to left-clicks only
- implemented right-click action on canvas that opens context menu listing sets of sources and filters not currently used in current set

2013-07-10
- debugged arrow signals and reference management that lead to reference-radicals that were still active (and called other local references) even though they should have been deleted but hadn't, as they were not added to the central list managing the arrows.

2013-05-25 - 27
- implemented save-methodology for nodes
	- set-table on db has a column "gui_data" that saves a dictionary with a namespace for the nodes, ids, etc. and their x/y (center) coordinates. That's all for now, will be able to add data later on easily.
	- added save button
	- added timeout signals that exectue the save_to_db after a 1s timeout if the modified_signal has been triggered. During that time the save button gets enabled making it possible to click it manually (If you're really in a hurry)

2013-05-24
- Started implementing new concepts sketched out yesterday:
	- db-changes: sets columns "source_ass", "filter_ass" contain dictionaries that link source-ids and filter-ids (respectively) to other nodes (through their ids). If they link to `-1` it means they directly connect to the set's set of targets. Each node can only link to one other node but accept multiple incoming connections. Filters can be chained up (but not in loops, this is an implementation detail in the control code later). A source can directly link to the set of targets.
	- BackupSourceCtrl: implemented logics in ctrl and gui code. Ctrl code carries all associations as object links. Gui code now sets up fully, spawning and connecting nodes (visually).
	- [done] BackupFilterCtrl: implementing same logics in ctrl and gui as for BackupSourceCtrl.
	- [done] implementing target sets visually:
		- write gui classes
		- spawn node(s)
		- get sources/filters to connect arrows up to targets set

2013-05-23
- restarted gui/ctrl implementation for sets with new concept
	- all node-based now after all.
	- sources are single nodes
	- filters are (multiple) sets of nodes of different sub-types ("starts with", "contains", "matches", "regex", etc.)
	- targets are always in a (semi-)fixed set. I'll reserve the option to implement functionality of mirroring data to an additional target and/or to remove a target permanently. All targets will still all be grouped into one logical unit (to visualize semi-static behaviour and since it'd probably less common to "frequently" alter the set of targets).
- superclassed BSNode, BSNodeItem to derive menu as well as all nodes (sources, filters, targets...) from it

2013-05-21
- [in progress] previous Q/A: document code
- ViewSetsDetailsSources/Filters/Targets superclassed into ViewSetsDetailsContainer
- ViewSetsDetailsArrow superclassed into same class name (and subclassed separate arrows)
- ViewSets:
	- arrows have arrowheads now
	- added targets
	- added arrows between filters and targets
	- added uniform, default width for sources, filters, targets and expansion to relaxed width on hover

2013-05-20
- [done] clean-up old, obsolete code (commented out etc.)
- [done] refactor (session) controllers to follow a paradigm where "add" and "remove" perform associative changes, while "create" and "delete" do integral changes (to model/database)
- [done] ability to remove a source
	- session: Added BackupSetCtrl.remove_backup_source()
- implemented scroll area into view_sets_details
- set-up the whole view_sets dynamic custom layout management
- implemented a view_set_details_arrows arrow set (sources to filters for now)

2013-05-19
- isinstance(): converted all comparison class-paths to absolute paths (bs.session.~ vs. ~)
- restructured source-files: created bs.ctrl, ~.model and sorted files accordingly
- [done] fixed/expanded keyboard/mouse controls on ViewSetsSetsList
- ViewSetsSetsList gains focus on set_view
